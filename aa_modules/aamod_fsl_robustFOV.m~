% AA module
% Runs BET (FSL Brain Extration Toolbox) on structural (usually)
% [For best functionality, it is recommended you run this after
% realignment and before writing the normalised EPI image
% If you do it before estimating the normalisation, make sure you normalise
% to a scull-stripped template, if at all possible!]

function [aap,resp]=aamod_fsl_robustFOV(aap,task,subj)

resp='';

switch task
    case 'report'
        
    case 'doit'
        
        % Find out what stream we should BET
        inputstream = aap.tasklist.currenttask.inputstreams.stream;
        % And the names of the output streams
        outputstream = aap.tasklist.currenttask.outputstreams.stream;
        % And which are the streams which we output...
        outputstream = outputstream(~[strcmp(inputstream,outputstream)]);
        
        % Get the image...
        Simg = aas_getfiles_bystream(aap,subj,inputstream{:});
        
        % Which file is considered, as determined by the structural parameter!        
        cSimg = deblank(Simg(aap.tasklist.currenttask.settings.structural, :));
        [Spth Sfn Sext] = fileparts(cSimg);
        if size(Simg,1) > 1
            fprintf('WARNING: Several %s found, considering: \n', inputstream{:})
            for t = 1:length(aap.tasklist.currenttask.settings.structural)
                fprintf('\t%s\n', Simg(t,:))
            end
        end        
        
        % Mat file of robust FOV...
        mSimg = fullfile(Spth, [Sfn '.mat']);
        
        % Run robustFOV...
        fprintf('Running robustFOV\n')
        [junk, w]=aas_runfslcommand(aap, ...
            sprintf('robustfov -v -i %s -r %s -m %s', ...
            cSimg, cSimg, mSimg));
        
        % Get inverse transform?
        
        
        % Apply robustFOV on remaining images
        remImg = 1:size(Simg, 1);
        remImg = remImg(remImg ~= aap.tasklist.currenttask.settings.structural);
        for r = remImg
            [junk, w]=aas_runfslcommand(aap, ...
                sprintf('flirt -in %s -ref %s -applyxfm -init %s -out %s', ...
                deblank(Simg(r,:)), cSimg, mSimg, deblank(Simg(r,:))));
        end
        
        keyboard
        
        %% DESCRIBE OUTPUTS!
        if aap.tasklist.currenttask.settings.maskBrain
            aap=aas_desc_outputs(aap,subj,inputstream{:},outStruct);
        else
            aap=aas_desc_outputs(aap,subj,inputstream{:},Simg);
        end
        maskStream = outputstream(~cellfun('isempty', strfind(outputstream,'BETmask')));
        aap=aas_desc_outputs(aap,subj, maskStream{:}, outMask);
        if aap.tasklist.currenttask.settings.masks
            meshStream = outputstream(~cellfun('isempty', strfind(outputstream,'BETmesh')));
            aap=aas_desc_outputs(aap,subj, meshStream{:}, outMesh);
        end
        
        %% DIAGNOSTIC IMAGE
        mriname = aas_prepare_diagnostic(aap,subj);
        
        %% Draw structural image...
        spm_check_registration(Simg)
        
        % This will only work for 1-7 masks
        OVERcolours = aas_colours;
        
        indx = 0;
        
        % Colour the brain extracted bit pink
        spm_orthviews('addcolouredimage',1,deblank(outStruct(1,:)), [0.9 0.4 0.4])
        % Add mesh outlines, to see if BET has worked properly!
        if aap.tasklist.currenttask.settings.masks
            for r = 1:size(outMesh,1)
                if strfind(outMesh(r,:), '.nii')
                    indx = indx + 1;
                    spm_orthviews('addcolouredimage',1,outMesh(r,:), OVERcolours{indx})
                end
            end
        else
            % Display outline of mask...
            copyfile(outMask(1,:), fullfile(Spth, 'betOutline.nii'));
            mask2outline(fullfile(Spth, 'betOutline.nii'));
            spm_orthviews('addcolouredimage',1, fullfile(Spth, 'betOutline.nii'), OVERcolours{1})
        end
        
        spm_orthviews('reposition', [0 0 0])
        
        print('-djpeg','-r150',fullfile(aap.acq_details.root, 'diagnostics', ...
            [mfilename '__' mriname '.jpeg']));
        
        
        %% Diagnostic VIDEO of masks
        if aap.tasklist.currenttask.settings.diagnostic
            
            Ydims = {'X', 'Y', 'Z'};
            for d = 1:length(Ydims)
                aas_image_avi( Simg, ...
                    fullfile(pth, ['bet_' nme '_brain_mask' ext]), ...
                    fullfile(aap.acq_details.root, 'diagnostics', [mfilename '__' mriname '_' Ydims{d} '.avi']), ...
                    d, ... % Axis
                    [800 600], ...
                    2); % Rotations
            end
            try close(2); catch; end
        end
        
        % Clean up...
        if ~aap.tasklist.currenttask.settings.maskBrain
            delete(outStruct);
        end
end
